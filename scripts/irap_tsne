#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE


################################################################################
# Setup and argument parsing
################################################################################

usage <- "irap_tsne --ifile file --out out_file_prefix [options]"
filenames <- c("ifile","lengths")

# specify our desired options in a list

option_list <- list(
    make_option(c("-i", "--ifile"), type="character", dest="ifile", help="TSV file name with the matrix with the counts per cell by gene/transcript."),
    make_option(c("-s", "--spikes"), type="character", dest="spikes", default=NULL, help="Optional GTF file with spike features"),
    make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in TSV format (default)."),
    make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix."),
    make_option(c("-c", "--max_threads"), type="numeric",default=1,help="Maximum number of threads that may be used."),
    make_option(c("-d", "--dim"), type="numeric",default=3,help="Number of dimensions (default=3)."),
    make_option(c("-C", "--min_cells"), type="numeric",default=1,dest="min.cells",help="Filter genes based on the number of cells where it is expressed."),
    make_option(c("-G", "--min_genes"), type="numeric",default=1,dest="min.genes",help="Filter cells based on the number of genes expressed."),
    make_option(c("-P", "--max-perplexity"), type="numeric",default=35,dest="max.perplexity",help="Maximum perplexity to consider."),
    make_option(c("-p", "--pca_components"), type="numeric", default = 20),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode")
)

multiple.options <- NULL
mandatory <- c("ifile","out")

opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

out.prefix <- opt$out
min.cells <- opt$min.cells
min.genes <- opt$min.genes

if ( opt$dim<2 ) {
  perror("Expected values greater than 1 for --dim parameter")
  q(status=2)
}

pdebug.enabled <- opt$debug
pdebug.save.state("irap_tsne","p0")

################################################################################
# Now import and check expression data
################################################################################

# Read the raw expression values
    
pinfo("Loading ",opt$ifile)
if ( opt$is_mtx ) {
    table <- mtx.load(opt$ifile)
} else {
    table <- quant.load(opt$ifile)
}
pinfo("Loading ",opt$ifile," done.")

# Remove any indicated spikes

if ( ! is.null(opt$spikes) ){
  spikes <- load.gtf(opt$spikes)
  
  if (any(unique(spikes$seqid) %in% rownames(table))){
    pinfo(paste("Removing", length(intersect(unique(spikes$seqid), rownames(table))), "spikes"))
    
    table <- table[! rownames(table) %in% spikes$seqid, ]
  }else{
    pinfo(paste("Supplied spikes in", opt$spikes, "don't exist in expression matrix"))
  }
}

# Check the final matrix size

if ( is.null(table) || ncol(table)<=3) {
    perror("Number of samples/cells too small (",ncol(table),")")
    q(status=1)
}

pdebug.save.state("irap_tsne","p1")

################################################################################
# Run the Seurat pipeline to prepare data for t-SNE
################################################################################

suppressPackageStartupMessages(library(Seurat))

pinfo("Creating expression object...")
nbt <- CreateSeuratObject(raw.data=table, project="irap", min.cells = min.cells, min.genes = min.genes)

x <- dim(GetAssayData(nbt))
pinfo(" # Cells/assays ",x[2])
pinfo(" # genes ",x[1])

if ( is.null(nbt) || ncol(GetAssayData(nbt))<2 ) {
  perror("Unable to continue - Number of cells/assays after QC is below 3")
  q(status=1)
}

## QC filtering has been done before

## log normalize
pinfo("Log normalizing ...")
nbt <- NormalizeData(object = nbt)

# Scaling and centering gene expression

pinfo("Scaling...")
nbt <- ScaleData(object = nbt)

pinfo("Finding variable genes...")
nbt <- FindVariableGenes(object = nbt, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)

# If the number of variable genes is too small, use all genes

if (length(nbt@var.genes) <= 30) {
  nbt@var.genes <- rownames(GetAssayData(nbt))
}

# Run the PCA

pinfo("Running PCA...")
nbt <- RunPCA(object = nbt, pc.genes = nbt@var.genes, do.print = FALSE, pcs.print = 1:5, pcs.compute = opt$pca_components)

# Now make the actual t-SNE tables

pinfo("Generating TSNEs...")

library(Rtsne)
perp.values <- c(1, seq(5,opt$max.perplexity,5))

for (p in perp.values) {
  pinfo("TSNE: perplexity ", p)
  
  nbt.res <- RunTSNE(object = nbt, dim.embed = opt$dim, dims.use = 1:opt$pca_components, do.fast = TRUE, perplexity = p)
  tsne <- data.frame(nbt.res@dr$tsne@cell.embeddings)
  tsne$Label = rownames(tsne)
  
  # Write output table
  
  write.table(tsne, file = paste0(out.prefix, "_tsne_perp_", p, ".tsv"), row.names=FALSE, quote=FALSE, sep="\t")

  ## also generate the png

  png(paste0(out.prefix, "_tsne_perp_", p, ".tsv.png"), height=1000, width=1000)
  par(bty="l",mar=c(4,4,1,8))
  plot(tsne[,c(1,2)])    
  dev.off()  
}
pinfo("All done.")
q(status=0)
